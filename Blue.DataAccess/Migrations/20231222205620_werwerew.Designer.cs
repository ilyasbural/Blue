// <auto-generated />
using System;
using Blue.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blue.DataAccess.Migrations
{
    [DbContext(typeof(BlueContext))]
    [Migration("20231222205620_werwerew")]
    partial class werwerew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blue.Core.BuildingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("BuildingType", (string)null);
                });

            modelBuilder.Entity("Blue.Core.BuyingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("BuyingType", (string)null);
                });

            modelBuilder.Entity("Blue.Core.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Blue.Core.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("Blue.Core.FeaturesAround", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("FeaturesAround", (string)null);
                });

            modelBuilder.Entity("Blue.Core.FeaturesInside", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("FeaturesInside", (string)null);
                });

            modelBuilder.Entity("Blue.Core.FeaturesOutside", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("FeaturesOutside", (string)null);
                });

            modelBuilder.Entity("Blue.Core.FromWho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("FromWho", (string)null);
                });

            modelBuilder.Entity("Blue.Core.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("FuelType", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Furniture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Furniture", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Hometown", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Hometown", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Management", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Management", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Picture", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("Blue.Core.RealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeaturesAroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeaturesInsideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeaturesOutsideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromWhoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FurnitureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HometownId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("WarmingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("BuyingTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FeaturesAroundId");

                    b.HasIndex("FeaturesInsideId");

                    b.HasIndex("FeaturesOutsideId");

                    b.HasIndex("FromWhoId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("HometownId");

                    b.HasIndex("PriceId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WarmingId");

                    b.ToTable("RealEstate", (string)null);
                });

            modelBuilder.Entity("Blue.Core.RealEstateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("RealEstateDetail", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Type", (string)null);
                });

            modelBuilder.Entity("Blue.Core.Warming", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Warming", (string)null);
                });

            modelBuilder.Entity("Blue.Core.RealEstate", b =>
                {
                    b.HasOne("Blue.Core.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.BuyingType", "BuyingType")
                        .WithMany()
                        .HasForeignKey("BuyingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.FeaturesAround", "FeaturesAround")
                        .WithMany()
                        .HasForeignKey("FeaturesAroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.FeaturesInside", "FeaturesInside")
                        .WithMany()
                        .HasForeignKey("FeaturesInsideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.FeaturesOutside", "FeaturesOutside")
                        .WithMany()
                        .HasForeignKey("FeaturesOutsideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.FromWho", "FromWho")
                        .WithMany()
                        .HasForeignKey("FromWhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Furniture", "Furniture")
                        .WithMany()
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Hometown", "Hometown")
                        .WithMany()
                        .HasForeignKey("HometownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blue.Core.Warming", "Warming")
                        .WithMany()
                        .HasForeignKey("WarmingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("BuyingType");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("FeaturesAround");

                    b.Navigation("FeaturesInside");

                    b.Navigation("FeaturesOutside");

                    b.Navigation("FromWho");

                    b.Navigation("FuelType");

                    b.Navigation("Furniture");

                    b.Navigation("Hometown");

                    b.Navigation("Price");

                    b.Navigation("Room");

                    b.Navigation("Size");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("Warming");
                });
#pragma warning restore 612, 618
        }
    }
}
